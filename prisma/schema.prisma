// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  username    String
  email       String     @unique
  passwordHash String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projects    Project[]  @relation("UserProjects")
  conversations Conversation[]
}

model Admin {
  id          String     @id @default(uuid())
  username    String
  email       String     @unique
  passwordHash String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Project {
  id          String     @id @default(uuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation("UserProjects", fields: [userId], references: [id])
  diagrams    Diagram[]
}

model Diagram {
  id          String     @id @default(uuid())
  projectId   String
  name        String
  type        String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id])
}

model AIModel {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  conversations Conversation[]
}

model Conversation {
  id          String     @id @default(uuid())
  userId      String
  aiModelId   String
  title       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  aiModel     AIModel    @relation(fields: [aiModelId], references: [id])
  messages    Message[]
}

model Message {
  id             String     @id @default(uuid())
  conversationId String
  sender         String     // "user" or "ai"
  content        String
  createdAt      DateTime   @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Admin {
  id           String   @id @default(uuid())
  username     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AIModel {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
}

model Conversation {
  id        String    @id @default(uuid())
  userId    String
  aiModelId String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  aiModel   AIModel   @relation(fields: [aiModelId], references: [id])
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  sender         String       // "user" or "ai"
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

// New models for diagram-specific AI conversations
model DiagramConversation {
  id        String                    @id @default(uuid())
  diagramId String                    @unique
  userId    String
  sessionId String                    @unique
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  diagram   Diagram                   @relation(fields: [diagramId], references: [id], onDelete: Cascade)
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  DiagramConversationMessage[]
}

model DiagramConversationMessage {
  id             String               @id @default(uuid())
  conversationId String
  role           String               // "user", "assistant", "system"
  content        String               @db.Text
  isCodeResponse Boolean              @default(false)
  timestamp      BigInt               // Store as bigint for JavaScript timestamp compatibility
  createdAt      DateTime             @default(now())
  conversation   DiagramConversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  projects              Project[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  conversations         Conversation[]
  projectComments       ProjectComment[]
  projectLikes          ProjectLike[]
  commentLikes          CommentLike[]
  diagramConversations  DiagramConversation[]
}

model Project {
  id          String           @id @default(cuid())
  name        String
  description String?          @default(" ")
  imageUrl    String           @default("https://placehold.co/600x400")
  isPublic    Boolean          @default(false)
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  diagrams    Diagram[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  comments    ProjectComment[]
  likes       ProjectLike[]
}

model Diagram {
  id           String               @id @default(cuid())
  name         String
  code         String               @db.Text
  projectId    String
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  imageUrl     String               @default("https://placehold.co/600x400")
  conversation DiagramConversation?
}

model ProjectComment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  projectId String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
}

model ProjectLike {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model CommentLike {
  id        String         @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime       @default(now())
  comment   ProjectComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}